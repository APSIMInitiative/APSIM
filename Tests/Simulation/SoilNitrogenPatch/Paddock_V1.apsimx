{
  "$type": "Models.Core.Simulations, Models",
  "ExplorerWidth": 300,
  "Version": 159,
  "Name": "Simulations",
  "ResourceName": null,
  "Children": [
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "ResourceName": null,
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Descriptors": null,
      "Name": "Base",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Clock, Models",
          "Start": "1972-01-01T00:00:00",
          "End": "1974-12-31T00:00:00",
          "Name": "Clock",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Climate.Weather, Models",
          "ConstantsFile": null,
          "FileName": "%root%\\Tests\\WeatherFiles\\Ruakura.met",
          "ExcelWorkSheetName": "",
          "Name": "Weather",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "Soil Arbitrator",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "Verbosity": 100,
          "Name": "Summary",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "Code": "using Models.Climate;\r\nusing System;\nusing System.Linq;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Zones;\r\nusing Models.AgPasture;\r\nusing System.Xml.Serialization;\nusing Models.WaterModel;\nusing Models.Surface;\r\nusing Models.Soils;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Collections.Generic;\r\nusing Models.Interfaces;\r\nusing Models.Soils.NutrientPatching;\r\nusing Models.Soils.Nutrients;\r\nusing MathNet.Numerics.Distributions;\nusing MathNet.Numerics.LinearAlgebra;\nusing System.Diagnostics;\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class SimpleCowScript : Model\r\n    {\n\t\t[Link] Simulation simulation;\n        [Link] Clock clock;\n        [Link] Fertiliser fertiliser;\n        [Link] WaterBalance waterBalance;\n        [Link] SurfaceOrganicMatter surfaceOrganicMatter;\n        [Link] INutrientPatchManager patchManager;\n        [Link] ISummary summary;\n    \r\n        // --------------- Privates ---------------------------------\n\n        private double CowBodyWeight = 450.0;\n        // kg\n        private string CowDateCalving = \"1-aug\";\n        private string CowDateInCalf = \"1-nov\";\n        private string CowDateDryOff = \"30-apr\";\n        private double CowMSPerDay = 0.0;\n        // kgMS/day/head\n        private double CowMSEnergyPerKg = 77.0;\n        // MJME/kg MS (trying 77 c.f. 80)\n        private double CowWalkingDist = 3.0;\n        private double CowWalkingEnergyPerKm = 2.0;\n        // MJME/km\n        private double[] CowN2BodyPerc = { 30.0, 10.0 };\n        // Percent N in intake to body and product for milking and dry\n        private double[] CowN2UrinePerc = { 42.0, 54.0 };\n        // Percent N in intake to uriney and product for milking and dry\n        private double[] CowN2DungPerc = { 28.0, 36.0 };\n        // Percent N in intake to dung and product for milking and dry\n        private double[] LactationCurveParam = { 20.0, 0.2, -0.04, 0.092 };\n        // Parameters for the lactation curve, last parm 0.113 will give 500 kg MS, 0.092 will give 406 kg MS\n        private double WeeksBeforeCalving = 0.0;\n        private double LactationWeek = 0.0;\n        private double UrineDepth = 0;\n                \n\n        //private double[] CowPregnancyParam = {54.59, -0.135}; // multiplier and exponential parameters for pregnancy energy (25 kg calf), time in weeks before\n        //private double[] CowPregnancyParam = {63.931, -0.139}; // multiplier and exponential parameters for pregnancy energy (30 kg calf), time in weeks before\n        private double[] CowPregnancyParam = { 72.154, -0.143 };\n\n        // multiplier and exponential parameters for pregnancy energy (35 kg calf), time in weeks before\n        //private double[] CowPregnancyParam = {76.208, -0.142}; // multiplier and exponential parameters for pregnancy energy (40 kg calf), time in weeks before\n   \n        private double CowMaintME = 54.0;\n        // MJME/day https://www.dairynz.co.nz/media/5789573/facts_and_figures_web_chapter4_cow_feed_requirements.pdf page 4 450- kg cow\n\n        private int PatchNumForUrine = -1;\n        private double AmountDungCReturned = 0.0;\n        private double iniOrgC;\n        private double iniOrgN;\n        private double[] UrineDepthPlacement;\n        private double myResidual;\n        bool GrazeNow = false;\n\n        double[] ArrayLoad;\n        double[] ArrayArea;\n   \n        double[] ArrayDepth;\n        double[] ArrayVol;\n        double slopeVolWithLoad;\n        double incrWaterContent = 0.05;\n        \n   \t    [NonSerialized]\n        Random rndConstSeed;\n        // increase in volumetric water content - used ot calculate depth\n\n\n        // --------------- Enumerated types ---------------------------------\n\n        public enum ForageTypeEnum\n        {\n            P000,\n            P025,\n            P050,\n            P075,\n            P100\n        }\n\n        public enum UrineReturnEnum\n        {\n            UniformAcrossAllPatches,\n            RotatingInOrder,\n            Random,\n            PseudoRandom\n        }\n\n        public enum GeneralFertTypeEnum\n        {\n            AllYear,\n            NoWinter,\n            Monthly\n        }\n\n        // --------------- Parameters --------------------------------------\n\n        [Description(\"Verbose output?\")]\n        public bool Verbose { get; set; }\n\n        [Separator(\"Parameters for ArrayLoad and ArrayVol - whatever they are.\")]\n        \n        // - Paramters for this manager\n        [Description(\"Number of realisaitons to be generated: \")] public int NumRealisations { get; set; }\n        [Description(\"First mean load of the generated distribution (g N): \")] public double MeanLoadToGenerate { get; set; }\n        [Description(\"Amount to add to the first mean every day (g N): \")] public double AmountAddMeanLoad { get; set; }\n        [Description(\"Means of the original distributions, mu_i load (gN) first and then mu_j volume (L): \")] public double[] VectorOfMeans { get; set; }\n        [Description(\"Covariance matrix - in order of E_ii, E_ij, E_ij, E_jj: \")] public double[] CovarianceMatrix { get; set; }\n\n        [Separator(\"Herd and ME demand information\")]\n\n        // excreta return parameters\n        [Description(\"Stocking rate (animals/ha)\")]\n        [Units(\"cows/ha\")]\n        public double StockingRate { get; set; }\n\n        [Description(\"Number of paddocks on the farm\")]\n        [Units(\"days\")]\n        public int Num1HaPaddocks { get; set; }\n\n        [Description(\"N concentration of the silage fed out (% N in DM)\")]\n        [Units(\"kgN/kgDM\")]\n        public double SilageNConc { get; set; }\n\n        [Description(\"ME concentration of the silage fed out (MJ ME / kg DM)\")]\n        [Units(\"MJME/kgDM\")]\n        public double SilageMEConc { get; set; }\n\n        [Separator(\"Excreta return parameters\")]\n\n        [Description(\"Is the forage WithPlantain or NoPlantain?\")]\n        public ForageTypeEnum ForageType { get; set; }\n\n        [Description(\"Number of urinations per animal per day\")]\n        public double UrinationsPerHead { get; set; }\n\n        [Description(\"Adjust the urine volume and depth with N load scaling?\")]\n        public bool AdjustVolme { get; set; }\n\n        [Description(\"Size of the edge effect (m)\")]\n        [Units(\"m\")]\n        public double patchMargin { get; set; }\n\n        [Separator(\"Patch characteristics\")]\n\n        [Description(\"Pattern for urine N return (PseudoRandom uses a constant seed to all for repeatable simulations)\")]\n        public UrineReturnEnum UrineReturnPattern { get; set; }\n\n        // how the urine is returned to the soil\n        [Description(\"How many patches should there be in the grid?\")]\n        public int NumPatches { get; set; }\n\n        [Description(\"Suppress the intial patch creation messages to the summary file? yes is reccomended for large numbers of patches\")]\n        public bool SuppressPatchCreationMessages { get; set; }\n\n        [Separator(\"Fertiliser management\")]\n\n        [Description(\"Annual amount of urea-N fertiliser to apply (kg N /ha) - application on the 1st of the month\")]\n        [Units(\"kgN/ha/yr\")]\n        public double GeneralFertAmt { get; set; }\n\n        [Description(\"Apply fertiliser all year or not in winter (May, June, July)?\")]\n        public GeneralFertTypeEnum GeneralFertType { get; set; }\n\n        [Description(\"Send the list of patches to the summary file?\")]\n        public bool SendPatchesToSummary { get; set; }\n   \n        // --------------------------- Outputs -------------------------------------------\n      \n\n        ///<summary>A list (string) of patch numbers that the urine is returned to today using \"|\" as a seperator</summary>\n        public string ListOfPatches { get; set; }\n\n        public string ListOfDepths { get; set; }\n        public string ListOfAmounts { get; set; }\n        public string DepositionsPerGrid { get; set; }\n        public int NumPatchesForUrine { get; set; }\n\n        [Units(\"m2\")]\n        public double AreaUrinePatchesToday { get; set; }\n\n        [Units(\"kgN/ha\")]\n        public double AmountUrineNReturned { get; set; }\n\n        [Units(\"head/ha\")]\n        public double StockingDensity { get; set; }\n\n        public double LoadAdjustmentPropOverall { get; set; }\n\n        public double LoadAdjustmentGrammesIndividual { get; set; }\n\n        [Units(\"mm\")]\n        public double AverageUrineDepth { get; set; }\n   \n        [Units(\"kgN/ha\")]\n        public double UrineNReturned { get; set; }\n\n        public double SilageMade { get; set; }\n        public double SilageFed { get; set; }\n        public double SilageNFed { get; set; }\n        public double SilageMEFed { get; set; }\n        public double HerdMEDemand { get; set; }\n        public double CowMEDemand { get; set; }\n        public double CowDMIntake { get; set; }\n        public string CowState { get; set; }\n\n\n        // --------------------------- Methods -------------------------------------------\n    \n        /// <summary>Invoked when simulation starts.</summary>\n        /// <param name=\"sender\">The sender of the event.</param>\n        /// <param name=\"e\">The event arguments.</param>\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n        \t// Calculate array load and array vol \n        \t//Debugger.Break();\n            CowState = \"Dry-Pregnant\";\n            CalculateLoadVol();\n            if (AdjustVolme)\n            {\n                if (ForageType == ForageTypeEnum.P000)\n                \tslopeVolWithLoad = 0.119;\n            \telse if (ForageType == ForageTypeEnum.P025)\n            \t\tslopeVolWithLoad = 0.116;\n                else if (ForageType == ForageTypeEnum.P050)\n                \tslopeVolWithLoad = 0.128;\n                else if (ForageType == ForageTypeEnum.P075)\n                \tslopeVolWithLoad = 0.158;\n                else if (ForageType == ForageTypeEnum.P100)\n                \tslopeVolWithLoad = 0.224;\t\t\n            }\n            \n            rndConstSeed = new Random((int)666);\n        }\n        \n        \n        /// <summary>Invoked by clock to do management actions.</summary>\n        /// <param name=\"sender\">The sender of the event.</param>\n        /// <param name=\"e\">The event arguments.</param>\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            // if this is the start of the simulation then sort out the depth for the urine placement, can't do this in initialisation because of the module order\n            if (clock.Today == clock.StartDate)\n            {\n                CalcUrinePlacementDepth();   // calculate the layer weighting for the urine depth deposition\n                //patchManager.MaximumNitrogenAvailableToPlants = 3.0;  // user can change this but this value reccomneded after testing\n                patchManager.NPartitionApproach = PartitionApproachEnum.BasedOnConcentrationAndDelta;\n\n                // in a gridded patchy paddock the patches are created at the start of the simulation and stay there throughout - no amalgamation\n                patchManager.AutoAmalgamationApproach = AutoAmalgamationApproachEnum.None;\n\n                patchManager.basePatchApproach = BaseApproachEnum.IDBased;\n        \n                patchManager.AllowPatchAmalgamationByAge = false;   // in a gridded patchy paddock the patches are created at the start of the simulation and stay there throughout - no amalgamation\n                patchManager.PatchAgeForForcedMerge = 3.0;\n                //patchManager.allowNewPools = true;               // this changes the calculation of soluble carbon for denitrification to use only the active pools (sometimes needed to prevent excessive denitrifciation when N from urine patches gets deep in the soil where all the carbon is inactive)\n  \n                int[] PatchToAddTo = new int[1];  //need an array variable for this\n                string[] PatchNmToAddTo = new string[1];\n                int nPatchesAdded = 0;\n                double NewArea = 1.0 / NumPatches;\n\n                while (nPatchesAdded < NumPatches - 1)\n                {\n                    AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();\n                    NewPatch.DepositionType = DepositionTypeEnum.ToNewPatch;\n                    NewPatch.AreaFraction = NewArea;\n                    PatchToAddTo[0] = 0;\n                    PatchNmToAddTo[0] = \"0\";\n                    NewPatch.AffectedPatches_id = PatchToAddTo;\n                    NewPatch.AffectedPatches_nm = PatchNmToAddTo;\n                    NewPatch.SuppressMessages = SuppressPatchCreationMessages;\n                    patchManager.Add(NewPatch);\n                    nPatchesAdded += 1;\n                }\n            }\n         \n            SilageMade = 0.0;\n            SilageFed = 0.0;\n            SilageNFed = 0.0;\n            SilageMEFed = 0.0;\n      \n            UrineNReturned = 0.0;\n            ListOfPatches = \"|\";\n            ListOfDepths = \"|\";\n            ListOfAmounts = \"|\";\n            DepositionsPerGrid = \"|\";\n            AreaUrinePatchesToday = 0.0;\n            NumPatchesForUrine = 0;\n            //UrinePatchLoad = 0.0;\n            StockingDensity = /*DaysPerGrazeArray[Clock.month - 1] * */ Num1HaPaddocks * StockingRate;\n\n            DoCowStuff();\n\n            if ((GeneralFertAmt > 0.0) && (clock.Today.Day == 1))\n            {\n                DoFertiliser();\n            }\n\n        }\n        \n        \n        /// <summary>Invoked when a graze occurs.</summary>\n        /// <param name=\"sender\">The sender of the event.</param>\n        /// <param name=\"e\">The event arguments.</param>\n        [EventSubscribe(\"DoUrineReturn\")]\n        private void OnDoUrineReturn(object sender, SimpleGrazing.UrineReturnType urineReturn)\n        {\n            CowDMIntake = urineReturn.GrazedDM / StockingDensity;\n            // calculate the number of patches based on the patch size and the /cow pasture amount of 15 kg DM /cow /day and 12 urine patchs per cow per day * 0.25 m2 /patch\n         \n         \n            int NumUrinations = Convert.ToInt32(UrinationsPerHead * StockingDensity);  // this gives the number of samples from the array\n            int[] MySamples = new int[NumUrinations];  // this will hold the indicies of the samples\n            double randomSampleSumLoad = 0.0;\n            for (int i = 0; i < NumUrinations; i++)\n            {\n                MySamples[i] = rndConstSeed.Next(0, NumRealisations-1);  \n                randomSampleSumLoad += ArrayLoad[MySamples[i]] / 1000;  // to put this into kg\n            }\n            Array.Sort(MySamples);  // sort MySamples into increasing order - that will also cause a sort for increasing Load\n            ListOfPatches = \"|\";\n            ListOfDepths = \"|\";\n            ListOfAmounts = \"|\";\n            DepositionsPerGrid = \"|\";\n            AmountUrineNReturned = urineReturn.Amount;\n            LoadAdjustmentPropOverall = AmountUrineNReturned / randomSampleSumLoad;\n            AverageUrineDepth = 0.0;\n         \n            bool testMoreUrineToApply = true;\n            int indexMySamples = -1;\n\n            while (testMoreUrineToApply)\n            {\n                bool testAggregation = true;  // jump out of the aggregation (i.e. go to the next grid\n                double tmpLoad = 0.0;\n                double tmpArea = 0.0;\n                double tmpDepth = 0.0;\n                int tempNum2Agg = 0;\n\n                PatchNumForUrine = rndConstSeed.Next(0, NumPatches);  //gets the value for PatchNumForUrine\n                ListOfPatches += (PatchNumForUrine + 1) + \"|\";  // add 1 here because the output component uses 1-based rather than 0-based arrays\n        \n                int[] PatchToAddTo = new int[1];  //need an array variable for this\n                string[] PatchNameToAddTo = new string[1];\n                double[] UreaToAdd = new double[waterBalance.Thickness.Length];  \n\n                while (testAggregation)\n                {\n                    indexMySamples += 1;  // index of the individual samples\n                    tempNum2Agg += 1;\n\n                    //summary.WriteMessage(this, Clock.Today + \" up to 3 \" + indexMySamples + \" \" + NumUrinations + \" \" + MySamples.Length, MessageType.Diagnostic);\n                    //summary.WriteMessage(this, Clock.Today + \" up to 3 \" + indexMySamples + \" \" + MySamples[indexMySamples], MessageType.Diagnostic);\n                    //summary.WriteMessage(this, Clock.Today + \" up to 3 \" + indexMySamples + \" \" + MySamples[indexMySamples] + \" \" + ArrayDepth[MySamples[indexMySamples]], MessageType.Diagnostic);\n\n                    double thisPatchLoad = (ArrayLoad[MySamples[indexMySamples]]);  // result is in g N\n                    double LoadAdjustmentGrammesIndividual = (thisPatchLoad * LoadAdjustmentPropOverall - thisPatchLoad) * slopeVolWithLoad; // result is in L and is the additional L in volume\n\n                    double thisPatchVolumeAdjusted = Math.Max(1.0, (ArrayVol[MySamples[indexMySamples]] + LoadAdjustmentGrammesIndividual));\n                    double WettedAreaCm2 = 1349.8 * Math.Log(thisPatchVolumeAdjusted) + 1034.8;\n                    //summary.WriteMessage(this, \"thisPatchVolumeAdjusted \" + thisPatchVolumeAdjusted + \" Math.Log(thisPatchVolumeAdjusted) \" + Math.Log(thisPatchVolumeAdjusted), MessageType.Diagnostic);\n\n                    double WettedRadiusM = Math.Sqrt(WettedAreaCm2 / Math.PI) / 100;\n                    double AffectedAreaM2 = (WettedRadiusM + patchMargin) * (WettedRadiusM + patchMargin) * Math.PI;\n           \n                    //summary.WriteMessage(this, \"incrWaterContent \" + incrWaterContent +  \"WettedRadiusM \" + WettedRadiusM, MessageType.Diagnostic );\n           \n                    UrineDepth = (thisPatchVolumeAdjusted / 1000 / incrWaterContent) / (WettedRadiusM * WettedRadiusM * Math.PI) * 1000; // now in mm\n                    AverageUrineDepth += UrineDepth / NumUrinations;\n\n                    //summary.WriteMessage(this, \"UrineDepth \" + UrineDepth + \" thisPatchVolumeAdjusted \" + thisPatchVolumeAdjusted + \" thisPatchLoad \" + thisPatchLoad + \" thisPatchLoadAdjusted \" + (thisPatchLoad * LoadAdjustmentPropOverall), MessageType.Diagnostic);\n                    //UrineDepth = ArrayDepth[MySamples[indexMySamples]];\n                    CalcUrinePlacementDepth();\n           \n                    for (int ii = 0; ii <= (waterBalance.Thickness.Length - 1); ii++)\n                        UreaToAdd[ii] += UrineDepthPlacement[ii] * ((ArrayLoad[MySamples[indexMySamples]] / 1000 * (AmountUrineNReturned / randomSampleSumLoad)) / (10000.0 / NumPatches) * 10000);   // the first /1000 is to convert g load to kg// need ot make depth dynamic\n                    UrineNReturned += (ArrayLoad[MySamples[indexMySamples]] / 1000) * LoadAdjustmentPropOverall;\n\n                    //summary.WriteMessage(this, Clock.Today + \" up to 4\", MessageType.Diagnostic);\n\n                    /*AddSoilCNPatchType CurrentPatch = new AddSoilCNPatchType();\n                    CurrentPatch.Sender = \"manager\";\n                    CurrentPatch.DepositionType = \"ToSpecificPatch\";\n                    PatchToAddTo[0] = PatchNumForUrine;\n                    CurrentPatch.AffectedPatches_id = PatchToAddTo;\n                    CurrentPatch.Urea = UreaToAdd;\n                    AddSoilCNPatch.Invoke(CurrentPatch); */\n\n                    if (Verbose)\n                        summary.WriteMessage(this, \"For sample \" + indexMySamples + \" returned \" + (ArrayLoad[MySamples[indexMySamples]] / 1000) + \" kg urine N to patch \" + PatchNumForUrine, MessageType.Diagnostic);\n           \n                    tmpArea += AffectedAreaM2;\n                    double testArea = 0.0;\n                    //summary.WriteMessage(this, Clock.Today + \" up to 5c\", MessageType.Diagnostic);\n\n                    if (indexMySamples >= (NumUrinations - 1))\n                        testArea = 20000.0; // a large area to force a final deposition\n                    else\n                    {\n                        //summary.WriteMessage(this, Clock.Today + \" up to 5c \"  + \" tmpArea \" + tmpArea + \" NumUrinations -1  \" + (NumUrinations -1), MessageType.Diagnostic  );\n              \n                        //testArea = (tmpArea + tmpArea + ArrayArea[MySamples[indexMySamples + 1]]) / 2.0; \n                        testArea = (tmpArea + (tmpArea + AffectedAreaM2)) / 2.0; \n                    }\n                    //summary.WriteMessage(this, Clock.Today + \" up to 6\", MessageType.Diagnostic);\n\n                    if (testArea > (10000.0 / NumPatches))  // i.e. stop this aggregation and move to a new grid\n                    {\n                        NumPatchesForUrine += 1;\n                        testAggregation = false; // so jump out of this loop\n                    }\n           \n                    //summary.WriteMessage(this, Clock.Today + \" up to 7\", MessageType.Diagnostic);\n\n                } // end of the while (testAggregation)\n        \n                //summary.WriteMessage(this, Clock.Today + \"8 existed aggregation loop and about add up UreaToAdd\", MessageType.Diagnostic);\n                double tempNReturned = 0.0;\n                for (int ii = 0; ii <= (waterBalance.Thickness.Length - 1); ii++)\n                    tempNReturned += UreaToAdd[ii];\n\n                //summary.WriteMessage(this, Clock.Today + \"9 adding to list of amounts, tempNReturned and UrineDepth are \" + tempNReturned + \" and \" + UrineDepth, MessageType.Diagnostic);\n                ListOfAmounts += Convert.ToInt32(tempNReturned) + \"|\";\n                //summary.WriteMessage(this, Clock.Today + \"10\", MessageType.Diagnostic);\n                ListOfDepths += Convert.ToInt32(UrineDepth) + \"|\"; //mmm\n                //summary.WriteMessage(this, Clock.Today + \"11\", MessageType.Diagnostic);\n                DepositionsPerGrid += tempNum2Agg + \"|\"; //mmm\n                //summary.WriteMessage(this, Clock.Today + \"12\", MessageType.Diagnostic);\n        \n\n        \n                AddSoilCNPatchType CurrentPatch = new AddSoilCNPatchType();\n                CurrentPatch.Sender = \"manager\";\n                CurrentPatch.DepositionType = DepositionTypeEnum.ToSpecificPatch;\n                PatchToAddTo[0] = PatchNumForUrine;\n                PatchNameToAddTo[0] = PatchNumForUrine.ToString();\n                CurrentPatch.AffectedPatches_id = PatchToAddTo;\n                CurrentPatch.AffectedPatches_nm = PatchNameToAddTo;\n                CurrentPatch.Urea = UreaToAdd;\n                patchManager.Add(CurrentPatch);\n\n                if (indexMySamples >= (NumUrinations - 1))\n                {\n                    testMoreUrineToApply = false;\n                }\n            } // end of the while (testMoreUrineToApply)\n         \n            //AreaUrinePatchesToday = UrinationsPerHead * SingleUrinePatchArea * StockingDensity;\n            //double AreaSingleGPPatch = 10000.0 / NumPatches; // units are m2\n            //NumPatchesForUrine = Math.Max(1, Convert.ToInt32(AreaUrinePatchesToday / AreaSingleGPPatch));\n            //double UrineNPerPatch = AmountUrineNReturned / NumPatchesForUrine; // units are kg N /patch\n            //UrinePatchLoad = (UrineNReturned / AreaSingleGPPatch * 10000);\n\n            if (Verbose)  // this needs updating\n            {\n                summary.WriteMessage(this, \"The amount of urine N to be returned to the whole paddock is \" + AmountUrineNReturned, MessageType.Diagnostic);\n            }            \n            if (SendPatchesToSummary)\n            {\n                summary.WriteMessage(this, clock.Today + \", ListOfPatches, returned urine to \" + NumPatchesForUrine + \" patches, these being: \" + ListOfPatches, MessageType.Diagnostic);\n                summary.WriteMessage(this, clock.Today + \", ListOfDepths, for the above \" + NumPatchesForUrine + \" patches, was : \" + ListOfDepths, MessageType.Diagnostic);\n                summary.WriteMessage(this, clock.Today + \", ListOfAmounts, for the above \" + NumPatchesForUrine + \" patches, was : \" + ListOfAmounts, MessageType.Diagnostic);\n                summary.WriteMessage(this, clock.Today + \", DepositionsPerGrid, for the above \" + NumPatchesForUrine + \" patches, was : \" + DepositionsPerGrid, MessageType.Diagnostic);\n            }\n    \n            //DoUrineReturnGP();  // all this is above now\n        }\n        \n        private void CalcUrinePlacementDepth()\n        {\n            // calculates what proportion of the urinary N to put in each layer of the soil\n      \n            foreach (Zone Paddock in simulation.FindAllChildren<Zone>())\n            {\n                var SoilWater = Paddock.FindInScope<WaterBalance>();\n                double tempDepth = 0.0;\n                UrineDepthPlacement = new double[SoilWater.Thickness.Length];\n                for (int i = 0; i <= (SoilWater.Thickness.Length - 1); i++)\n                {\n                    tempDepth += SoilWater.Thickness[i];\n                    if (tempDepth <= UrineDepth)\n                    {\n                        UrineDepthPlacement[i] = SoilWater.Thickness[i] / UrineDepth;\n                    }\n                    else\n                    {\n                        UrineDepthPlacement[i] = (UrineDepth - (tempDepth - SoilWater.Thickness[i])) / (tempDepth - (tempDepth - SoilWater.Thickness[i])) * SoilWater.Thickness[i] / UrineDepth;\n                        UrineDepthPlacement[i] = Math.Max(0.0, Math.Min(1.0, UrineDepthPlacement[i]));\n                    }\n                    if (Verbose)\n                        summary.WriteMessage(this, \"The proportion of urinary-N deposited into the \" + i + \"th layer will be \" + UrineDepthPlacement[i], MessageType.Diagnostic);\n                }\n            }\n\n        }        \n        \n        private void DoFertiliser()\n        {\n            bool ApplyFert = false; // the test for first day of the month has already been done, this will only test to make sure no fertiliser in winter etc\n            double NumMonths;\n      \n            if (GeneralFertType == GeneralFertTypeEnum.Monthly)\n            {\n                NumMonths = 12;\n                ApplyFert = true;\n            }\n            else if (GeneralFertType == GeneralFertTypeEnum.NoWinter)\n            {\n                NumMonths = 9;\n                if ((clock.Today.Month < 5) || (clock.Today.Month > 7))\n                    ApplyFert = true;\n                else\n                    ApplyFert = false;\n            }\n            else\n                throw new Exception(\"Wrong fertiliser setting\");\n\n            if (ApplyFert)\n            {\n                foreach (Zone Paddock in simulation.FindAllChildren<Zone>())\n                {\n                    var fertiliser = Paddock.FindInScope<Fertiliser>();\n                    fertiliser.Apply(GeneralFertAmt / NumMonths, Fertiliser.Types.UreaN);\n                    if (Verbose)\n                        summary.WriteMessage(this, \"Applying \" + (GeneralFertAmt / NumMonths) + \" kg of fertiliser to the whole paddock\", MessageType.Diagnostic);\n                }\n            }\n        }\n        \n        private void DoCowStuff()\n        {\n            if (DateUtilities.CompareDates(CowDateCalving, clock.Today) > 0)\n                WeeksBeforeCalving = (DateUtilities.GetDate(CowDateCalving, (clock.Today.Year + 1)) - clock.Today).TotalDays / 7.0;\n            else\n                WeeksBeforeCalving = (DateUtilities.GetDate(CowDateCalving, clock.Today.Year) - clock.Today).TotalDays / 7.0;\n\n\n            if (DateUtilities.CompareDates(CowDateCalving, clock.Today) <= 0)\n                LactationWeek = (clock.Today - DateUtilities.GetDate(CowDateCalving, (clock.Today.Year - 1))).TotalDays / 7.0;\n            else\n                LactationWeek = (clock.Today - DateUtilities.GetDate(CowDateCalving, (clock.Today.Year))).TotalDays / 7.0;\n\n\n            // find state\n            if (DateUtilities.WithinDates(CowDateCalving, clock.Today, CowDateInCalf))\n            {\n                CowState = \"Milking-Notpreg\";\n                CowMSPerDay = LactationCurveParam[0] * Math.Pow(LactationWeek, LactationCurveParam[1]) * Math.Exp(LactationCurveParam[2] * LactationWeek) * LactationCurveParam[3];\n                //CowMEDemand = 0.0 + 0.0 + CowWalkingDist * CowWalkingEnergyPerKm + CowMSPerDay * CowMSEnergyPerKg;\n                CowMEDemand = CowMaintME + 0.0 + CowWalkingDist * CowWalkingEnergyPerKm + CowMSPerDay * CowMSEnergyPerKg;\n            }\n            else if (DateUtilities.WithinDates(CowDateInCalf, clock.Today, CowDateDryOff))\n            {\n                CowState = \"Milking-Pregnant\";\n                CowMSPerDay = LactationCurveParam[0] * Math.Pow(LactationWeek, LactationCurveParam[1]) * Math.Exp(LactationCurveParam[2] * LactationWeek) * LactationCurveParam[3];\n                //CowMEDemand = 0.0 + (CowPregnancyParam[0] * Math.Exp(CowPregnancyParam[1] * WeeksBeforeCalving)) + CowWalkingDist * CowWalkingEnergyPerKm + CowMSPerDay * CowMSEnergyPerKg;  //=72.154*EXP(-0.143*L3)\n                CowMEDemand = CowMaintME + (CowPregnancyParam[0] * Math.Exp(CowPregnancyParam[1] * WeeksBeforeCalving)) + CowWalkingDist * CowWalkingEnergyPerKm + CowMSPerDay * CowMSEnergyPerKg;  //=72.154*EXP(-0.143*L3)\n            }\n            else if (DateUtilities.WithinDates(CowDateDryOff, clock.Today, CowDateCalving))\n            {\n                CowState = \"Dry-Pregnant\";\n                CowMSPerDay = 0.0;\n                CowMEDemand = CowMaintME + (CowPregnancyParam[0] * Math.Exp(CowPregnancyParam[1] * WeeksBeforeCalving)) + CowWalkingDist * CowWalkingEnergyPerKm + 0.0;  //=72.154*EXP(-0.143*L3)\n            }\n            else\n                throw new Exception(\"Error in calculating CowState\");  \n\n            HerdMEDemand = CowMEDemand * StockingDensity;\n            //summary.WriteMessage(this, Clock.Today + \" CowState \" + CowState + \" CowMSPerDay \" + CowMSPerDay + \" CowMEDemand \" + CowMEDemand, MessageType.Diagnostic);\n\n      \n        }\n        \n        \n        private void CalculateLoadVol()\n        {\n        \tvar RandomNumGenerator = new Random(666);\n            \n            // Defines parameters of transformed distribution.\n            var loadToGenerate = MeanLoadToGenerate + AmountAddMeanLoad;\n            double NormalMeanLoadToGenerate = Math.Log10(loadToGenerate) - 0.5 * CovarianceMatrix[0];\n\n            double[,] TransformedMu = { { NormalMeanLoadToGenerate },\n                                        { VectorOfMeans[1] }};\n\n            double[,] SigmaRows = { { CovarianceMatrix[0], CovarianceMatrix[1] },\n                                    { CovarianceMatrix[2], CovarianceMatrix[3] } };\n\n            double[,] SigmaColumns = { { 1} };\n\n            // Converts parameters to MathNet matrices.\n            Matrix<double> TransformedMuMatrix = Matrix<double>.Build.DenseOfArray(TransformedMu);\n            Matrix<double> SigmaRowsMatrix = Matrix<double>.Build.DenseOfArray(SigmaRows);\n            Matrix<double> SigmaColumnsMatrix = Matrix<double>.Build.DenseOfArray(SigmaColumns);\n\n            // Initializes transformed distribution.\n            var TransformedMVN = new MatrixNormal(TransformedMuMatrix,\n                                                  SigmaRowsMatrix,\n                                                  SigmaColumnsMatrix,\n                                                  RandomNumGenerator);\n\n            // Generates samples and transforms them back to lognormal space.\n            double[] LogNormalLoadSamples = new double[NumRealisations];\n            double[] LogNormalVolumeSamples = new double[NumRealisations];\n\n            for (int i = 0; i < NumRealisations; i++)\n            {\n                Matrix<double> LoadVolumeSample = TransformedMVN.Sample();\n                LogNormalLoadSamples[i] = Math.Pow(10.0, LoadVolumeSample[0,0]);\n                LogNormalVolumeSamples[i] = Math.Pow(10.0, LoadVolumeSample[1,0]);\n            }\n\n            // Updates some script parameters.\n            ArrayLoad = LogNormalLoadSamples;\n            ArrayVol = LogNormalVolumeSamples;\n        }\n    }\r\n}\r\n",
          "Parameters": [
            {
              "Key": "Verbose",
              "Value": "False"
            },
            {
              "Key": "NumRealisations",
              "Value": "3334"
            },
            {
              "Key": "MeanLoadToGenerate",
              "Value": "0"
            },
            {
              "Key": "AmountAddMeanLoad",
              "Value": "2.5"
            },
            {
              "Key": "VectorOfMeans",
              "Value": "1.1567018157972, 0.400851532821705"
            },
            {
              "Key": "CovarianceMatrix",
              "Value": "0.047123025480434, 0.033361752139528, 0.033361752139528, 0.033598852595467"
            },
            {
              "Key": "StockingRate",
              "Value": "2.25"
            },
            {
              "Key": "Num1HaPaddocks",
              "Value": "25"
            },
            {
              "Key": "SilageNConc",
              "Value": "2.75"
            },
            {
              "Key": "SilageMEConc",
              "Value": "11"
            },
            {
              "Key": "ForageType",
              "Value": "P025"
            },
            {
              "Key": "UrinationsPerHead",
              "Value": "11"
            },
            {
              "Key": "AdjustVolme",
              "Value": "False"
            },
            {
              "Key": "patchMargin",
              "Value": "0.1"
            },
            {
              "Key": "UrineReturnPattern",
              "Value": "PseudoRandom"
            },
            {
              "Key": "NumPatches",
              "Value": "3"
            },
            {
              "Key": "SuppressPatchCreationMessages",
              "Value": "False"
            },
            {
              "Key": "GeneralFertAmt",
              "Value": "100"
            },
            {
              "Key": "GeneralFertType",
              "Value": "NoWinter"
            },
            {
              "Key": "SendPatchesToSummary",
              "Value": "False"
            }
          ],
          "Name": "SimpleCow",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "Code": "using System;\nusing Models.Core;\nusing Models.Interfaces;\nusing Models.Soils;\nusing Models.WaterModel;\nusing Models.AgPasture;\nusing System.Linq;\nusing System.Diagnostics;\nusing APSIM.Shared.Utilities;\nusing Models.Soils.Nutrients;\nnamespace Models\n{\n    [Serializable]\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class ReportingWithPatchesScript : Model\n    {\n        [Link] private Simulation simulation;\n        [Link] private Clock clock;\n        [Link] private SimpleCowScript simpleCow;\n        [Link] private SimpleGrazing simpleGrazing;\n        [Link(ByName=true)] private ISolute urea;\n        [Link(ByName=true)] private ISolute no3;\n        [Link(ByName=true)] private ISolute nh4;\n\n\n        // --------------- Privates ---------------------------------\n\n        private double iniOrgC;\n        private double iniOrgN;\n       [NonSerialized] private CNPatchVariableType myPatchNO3 = new CNPatchVariableType();\n       [NonSerialized] private CNPatchVariableType myPatchNH4 = new CNPatchVariableType();\n        private bool ReportToday = false;\n\n        // --------------- Enumerated types ---------------------------------\n\n        public enum ReportingFrequencyEnum\n        {\n            Daily,\n            TenDaily,\n            Monthly,\n            Annual,\n            OnGrazing\n        }\n\n        // --------------- Parameters ---------------------------------\n\n        [Description(\"Verbose output?\")]\n        public bool Verbose { get; set; }\n\n        [Description(\"Name of output component for reporting\")]\n        [Display(Type = DisplayType.Model, ModelType=typeof(Report))]\n        public Report OutputModule { get; set; }\n\n        [Description(\"Frequency of reporting\")]\n        public ReportingFrequencyEnum ReportingFreq { get; set; }\n\n        [Description(\"Location for reporting\")]\n        public string Site { get; set; }\n\n        [Description(\"Soil name for reporting\")]\n        public string SoilName { get; set; }\n\n        [Description(\"Low (2800) or high (3500) pasture biomasses for grazing\")]\n        public string Regrowth { get; set; }\n\n        [Description(\"To make analysing the output easier\")]\n        public string Sorter { get; set; }\n\n        [Description(\"For outputing\")]\n        public string LocSoilFert { get; set; }\n\n        // --------------- Outputs ---------------------------------\n\n        public int DaysSinceReport { get; set; }\n        public double NHA { get; set; }\n        public double PGR { get; set; }\n        public double HerbageGrazed { get; set; }\n        public double HerbageGrazedN { get; set; }\n        public double HerbageGrazedMEConc { get; set; }\n        public double UreaReturned { get; set; }\n        public double Fixation { get; set; }\n        public double LeachN { get; set; }\n        public double Denit { get; set; }\n        public double DenitN2O { get; set; }\n        public double OrgC { get; set; }\n        public double OrgN { get; set; }\n        public double dltOrgC { get; set; }\n        public double dltOrgN { get; set; }\n        public double MinN { get; set; }\n        public double UreaN { get; set; }\n        public double NH4N { get; set; }\n        public double NO3N { get; set; }\n        public double UreaAddedInGrazing { get; set; }\n        [Units(\"mm\")] public double Drainage600 { get; set; }\n        public double NetSilageImported { get; set; }\n        public double SumSilageMade { get; set; }\n        public double SumSilageFed { get; set; }\n        public double UrinePatchLoad { get; set; }\n        public int Events { get; set; }\n        public string SiteSoil { get; set; }\n        public double AboveGroundDM { get; set; }\n        public int PatchCount { get; set; }\n        public int z600 { get; set; }\n        public int z300 { get; set; }\n   \n      \n        /// <summary>Invoked when simulation starts.</summary>\n        /// <param name=\"sender\">The sender of the event.</param>\n        /// <param name=\"e\">The event arguments.</param>\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            //Debugger.Break();\n              if (Verbose)\n                 Console.WriteLine(\"Initialising the Manager for grazing, urine return and reporting\");\n      \n            DaysSinceReport = 0;\n\n            SiteSoil = Site + SoilName;\n            Events = 1;\n\n            if (Verbose)\n                Console.WriteLine(\"Finished initialising the Manager for grazing, urine return and reporting\");\n        }\n\n\n        // <summary>Invoked by clock to let us do some calculations.</summary>\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            if (Verbose)\n                 Console.WriteLine(\"In Prepare for the Reporting Manager on \" + clock.Today);\n\n            // if this is the start of the simulation then sort out the depth for the urine placement, can't do this in initialisation because of the module order\n            if (clock.Today == clock.StartDate)\n            {\n                iniOrgC = 0.0; \n                iniOrgN = 0.0;\n                z300 = 0;\n                z600 = 0;\n\n                foreach (Zone paddock in simulation.FindAllChildren<Zone>())\n                {\n                    var soilNitrogen = paddock.FindInScope<Nutrient>();\n                    var soilWater = paddock.FindInScope<WaterBalance>();\n\n                    double tempDepth = 0.0;\n\n                    for (int ii = 0; ii < soilWater.Thickness.Length; ii++)\n                    {\n                       iniOrgC += soilNitrogen.TotalC[ii]; \n                       iniOrgN += soilNitrogen.TotalN[ii];\n                       tempDepth += soilWater.Thickness[ii];\n                       if (tempDepth <= 300)\n                          z300 = ii;\n                       if (tempDepth <= 600)\n                          z600 = ii;\n                    }\n                }\n        }\n\n\n        if (Verbose)\n            Console.WriteLine(\"Finished Prepare for the Reporting Manager on \" + clock.Today);\n        }\n\n\n        // <summary>Invoked by clock to let us do report calculations.</summary>\n        [EventSubscribe(\"DoReportCalculations\")]\n        private void OnDoReportCalculations(object sender, EventArgs e)\n        {\n            if (Verbose)\n                 Console.WriteLine(\"In Post for the Reporting Manager on \" + clock.Today);\n\n            // should reporting be done today?  \n            if (ReportingFreq == ReportingFrequencyEnum.Daily)\n                ReportToday = true;\n            else if ((ReportingFreq == ReportingFrequencyEnum.TenDaily) && ((clock.Today.Day == 10) || (clock.Today.Day == 20) || (DateUtilities.IsEndOfMonth(clock.Today))))\n                ReportToday = true;\n            else if ((ReportingFreq == ReportingFrequencyEnum.Monthly) && (DateUtilities.IsEndOfMonth(clock.Today)))\n                ReportToday = true;\n            else if ((ReportingFreq == ReportingFrequencyEnum.Annual) && (DateUtilities.IsEndOfYear(clock.Today)))\n                ReportToday = true;\n            else if ((ReportingFreq == ReportingFrequencyEnum.OnGrazing) && (simpleGrazing.GrazedToday))\n                ReportToday = true;\n            else\n                ReportToday = false;\n\n            DaysSinceReport += 1;\n\n            // each day gather data for the accumulations\n            foreach (Zone paddock in simulation.FindAllChildren<Zone>())\n            {\n                var sward = paddock.FindAllInScope<PastureSpecies>();\n                var soilWater = paddock.FindInScope<WaterBalance>();\n                var nutrient = paddock.FindInScope<Nutrient>();\n                var denitrificationModel = nutrient.FindInScope<NFlow>();\n\n                AboveGroundDM = sward.Sum(species => species.AboveGroundWt);\n                NHA += sward.Sum(species => species.HerbageGrowthWt);\n                PGR = NHA;  // divide this by the number of days just before reporting\n                Fixation += sward.Sum(species => species.FixedN);\n\n                double[] tempArray = soilWater.FlowNO3;\n                LeachN += tempArray[soilWater.Thickness.Length - 1];  // only take the deepest element\n\n                tempArray = soilWater.Flux;      \n                Drainage600 += tempArray[z600];  //mmm\n\n                for (int ii = 0; ii <= z300; ii++)\n                {\n                    Denit += denitrificationModel.Value[ii];\n                    DenitN2O += nutrient.N2Oatm[ii];\n                }\n            }  \n\n            // Things that come from other Managers or modules at the current level\n            HerbageGrazed += simpleGrazing.GrazedDM;\n            HerbageGrazedN += simpleGrazing.GrazedN;\n            UreaReturned += simpleCow.UrineNReturned;\n            if ((simpleCow.NumPatchesForUrine * simpleCow.NumPatches) > 0)\n                UrinePatchLoad = UreaReturned / (double)simpleCow.NumPatchesForUrine / (double)simpleCow.NumPatches;\n            else\n                UrinePatchLoad = 0.0;\n\n            SumSilageMade += simpleCow.SilageMade;\n            SumSilageFed += simpleCow.SilageFed;\n            NetSilageImported = SumSilageFed - SumSilageMade;\n\n            if (ReportToday)\n            {\n                OrgC = 0.0;\n                OrgN = 0.0;\n                UreaN = 0.0;\n                NH4N = 0.0;\n                NO3N = 0.0;\n                MinN = 0.0;\n\n                foreach (Zone paddock in simulation.FindAllChildren<Zone>())\n                {\n                    var sward = paddock.FindAllInScope<PastureSpecies>();\n                    var soilWater = paddock.FindInScope<WaterBalance>();\n                    var soilNitrogen = paddock.FindInScope<Nutrient>();\n\n                    for (int ii = 0; ii <= (soilWater.Thickness.Length - 1); ii++)\n                    {\n                       OrgC += soilNitrogen.TotalC[ii]; \n                       OrgN += soilNitrogen.TotalN[ii];\n                       UreaN += urea.kgha[ii];\n                       NH4N += nh4.ppm[ii];\n                       NO3N += no3.ppm[ii];\n                       MinN = UreaN + NH4N + NO3N;\n                    }\n                    dltOrgC = OrgC - iniOrgC; \n                    dltOrgN = OrgN - iniOrgN;\n                    iniOrgC = OrgC; // ready for the next calculation of change in pools\n                    iniOrgN = OrgN;\n                }\n\n                PGR = NHA / DaysSinceReport;  \n\n                // do the patch outputs here\n                OutputModule.DoOutput();\n\n                // now zero the reported variables\n                DaysSinceReport = 0;\n                HerbageGrazed = 0.0;\n                HerbageGrazedN = 0.0;\n                DaysSinceReport = 0;\n                NHA = 0;\n                PGR = 0;\n                UreaReturned = 0;\n                Fixation = 0;\n                LeachN = 0;\n                Denit = 0;\n                DenitN2O = 0;\n                OrgC = 0;\n                OrgN = 0;\n                MinN = 0;\n                UreaN = 0;\n                NH4N = 0;\n                NO3N = 0;\n                Drainage600 = 0.0;\n                NetSilageImported = 0.0;\n                SumSilageMade = 0.0;\n                SumSilageFed = 0.0;\n            }\n        }\n    }\n}\n",
          "Parameters": [
            {
              "Key": "Verbose",
              "Value": "False"
            },
            {
              "Key": "OutputModule",
              "Value": "[WholePaddock]"
            },
            {
              "Key": "ReportingFreq",
              "Value": "OnGrazing"
            },
            {
              "Key": "Site",
              "Value": "Ruakura"
            },
            {
              "Key": "SoilName",
              "Value": "HE"
            },
            {
              "Key": "Regrowth",
              "Value": "1low"
            },
            {
              "Key": "Sorter",
              "Value": "S0"
            },
            {
              "Key": "LocSoilFert",
              "Value": "RuaHE100"
            }
          ],
          "Name": "ReportingWithPatches",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Report, Models",
          "VariableNames": [
            "[Clock].Today",
            "[SimpleCow].SimpleCowScript.NumPatches",
            "[ReportingWithPatches].ReportingWithPatchesScript.LocSoilFert as LocSoil",
            "[SimpleCow].SimpleCowScript.UrinationsPerHead",
            "[SimpleCow].SimpleCowScript.ForageType",
            "[SimpleCow].SimpleCowScript.patchMargin",
            "[SimpleCow].SimpleCowScript.StockingRate",
            "[SimpleCow].SimpleCowScript.GeneralFertAmt",
            "[SimpleGrazing].GrazingInterval",
            "[SimpleGrazing].PreGrazeDM as PreGrazeDM",
            "[SimpleGrazing].PostGrazeDM",
            "[SimpleCow].SimpleCowScript.HerdMEDemand",
            "[SimpleCow].SimpleCowScript.LoadAdjustmentPropOverall as LoadAdjustment",
            "[SimpleCow].SimpleCowScript.AverageUrineDepth",
            "[ReportingWithPatches].ReportingWithPatchesScript.Events",
            "[ReportingWithPatches].ReportingWithPatchesScript.UreaReturned as UrineNReturned",
            "[SimpleCow].SimpleCowScript.NumPatchesForUrine as GridsUsed",
            "[ReportingWithPatches].ReportingWithPatchesScript.UrinePatchLoad",
            "[SimpleGrazing].GrazedDM",
            "[SimpleGrazing].GrazedN",
            "[ReportingWithPatches].ReportingWithPatchesScript.LeachN",
            "[ReportingWithPatches].ReportingWithPatchesScript.Denit",
            "[ReportingWithPatches].ReportingWithPatchesScript.DenitN2O",
            "[ReportingWithPatches].ReportingWithPatchesScript.Fixation",
            "[ReportingWithPatches].ReportingWithPatchesScript.MinN",
            "[ReportingWithPatches].ReportingWithPatchesScript.dltOrgN",
            "[ReportingWithPatches].ReportingWithPatchesScript.Drainage600",
            "[SimpleCow].SimpleCowScript.CowDMIntake",
            "[ReportingWithPatches].ReportingWithPatchesScript.NHA",
            "[ReportingWithPatches].ReportingWithPatchesScript.PGR",
            "[ReportingWithPatches].ReportingWithPatchesScript.NetSilageImported",
            "[ReportingWithPatches].ReportingWithPatchesScript.SumSilageMade as SilageMade",
            "[ReportingWithPatches].ReportingWithPatchesScript.SumSilageFed as SilageFed",
            "[SimpleCow].SimpleCowScript.StockingDensity",
            "[SimpleCow].SimpleCowScript.CowState",
            "[SimpleCow].SimpleCowScript.ListOfPatches"
          ],
          "EventNames": [
            ""
          ],
          "GroupByVariableName": null,
          "Name": "WholePaddock",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 1.0,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "Name": "Paddock",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Core.Folder, Models",
              "ShowInDocs": true,
              "GraphsPerPage": 6,
              "Name": "Manager folder",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Manager, Models",
                  "Code": "",
                  "Parameters": null,
                  "Name": "CentrePivot",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.AgPasture.SimpleGrazing, Models",
              "GrazingRotationType": 1,
              "SimpleGrazingFrequencyString": "0",
              "SimpleMinGrazable": 0.0,
              "SimpleGrazingResidual": 1000.0,
              "PreGrazeDMArray": [
                2800.0,
                2800.0,
                2800.0,
                2800.0,
                2800.0,
                2800.0,
                2800.0,
                2800.0,
                2800.0,
                2800.0,
                2800.0,
                2800.0
              ],
              "PostGrazeDMArray": [
                1500.0,
                1500.0,
                1500.0,
                1500.0,
                1250.0,
                1250.0,
                1250.0,
                1250.0,
                1500.0,
                1500.0,
                1500.0,
                1500.0
              ],
              "FlexibleExpressionForTimingOfGrazing": null,
              "FlexibleGrazePostDM": 0.0,
              "MaximumRotationLengthArray": [
                50.0,
                50.0,
                50.0,
                50.0,
                60.0,
                60.0,
                90.0,
                70.0,
                50.0,
                50.0,
                50.0,
                50.0
              ],
              "MinimumRotationLengthArray": [
                1.0,
                1.0,
                1.0,
                1.0,
                3.0,
                3.0,
                3.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0
              ],
              "NoGrazingStartString": null,
              "NoGrazingEndString": null,
              "FractionDefoliatedNToSoil": [
                0.75
              ],
              "FractionExcretedNToDung": [
                0.4
              ],
              "CNRatioDung": 0.0,
              "DepthUrineIsAdded": 250.0,
              "FractionPopulationDecline": 0.0,
              "TramplingOn": false,
              "MaximumPropLitterMovedToSoil": 0.1,
              "PastureConsumedAtMaximumRateOfLitterRemoval": 1200.0,
              "SpeciesCutProportions": null,
              "Name": "SimpleGrazing",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "SurfOM": [],
              "Canopies": [],
              "InitialResidueName": "grass",
              "InitialResidueType": "grass",
              "InitialResidueMass": 500.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 10.0,
              "Name": "SurfaceOrganicMatter",
              "ResourceName": "SurfaceOrganicMatter",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 0.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "SoilHeatFluxFraction": 0.0,
              "MinimumHeightDiffForNewLayer": 0.0,
              "NightInterceptionFraction": 0.0,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser",
              "ResourceName": "Fertiliser",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.AgPasture.PastureSpecies, Models",
              "doyGermination": 275,
              "daysEmergenceToAnthesis": 120,
              "daysAnthesisToMaturity": 85,
              "degreesDayForAnthesis": 1100.0,
              "degreesDayForMaturity": 900.0,
              "daysAnnualsFactor": 45,
              "FVPDFunction": {
                "$type": "Models.Functions.LinearInterpolationFunction, Models",
                "Name": "LinearInterpolationFunction",
                "ResourceName": null,
                "Children": [],
                "Enabled": true,
                "ReadOnly": false
              },
              "LightProfile": null,
              "InitialShootDM": 1500.0,
              "InitialRootDM": 450.0,
              "InitialRootDepth": 750.0,
              "initialDMFractionsGrasses": [
                0.15,
                0.25,
                0.25,
                0.05,
                0.05,
                0.1,
                0.1,
                0.05,
                0.0,
                0.0,
                0.0
              ],
              "initialDMFractionsLegumes": [
                0.16,
                0.23,
                0.22,
                0.05,
                0.03,
                0.05,
                0.05,
                0.01,
                0.04,
                0.08,
                0.08
              ],
              "initialDMFractionsForbs": [
                0.2,
                0.2,
                0.15,
                0.05,
                0.1,
                0.15,
                0.1,
                0.05,
                0.0,
                0.0,
                0.0
              ],
              "PhotosyntheticEfficiency": 0.01,
              "PhotosynthesisCurveFactor": 0.8,
              "FractionPAR": 0.5,
              "ReferenceCO2": 380.0,
              "CO2EffectScaleFactor": 700.0,
              "CO2EffectOffsetFactor": 600.0,
              "CO2EffectMinimum": 0.7,
              "CO2EffectExponent": 2.0,
              "ReproSeasonDurationCoeff": 2.0,
              "ReproSeasonShouldersLengthFactor": 1.0,
              "ReproSeasonOnsetDurationFactor": 0.6,
              "RelativeTurnoverEmerging": 2.0,
              "DetachmentDroughtCoefficient": 3.0,
              "DetachmentDroughtEffectMin": 0.1,
              "TurnoverStockFactor": 0.01,
              "TurnoverDefoliationEffectMin": 0.025,
              "MinimumGreenLeafProp": 0.8,
              "MinimumGreenRootProp": 0.5,
              "Name": "AGPRyegrass",
              "ResourceName": "AGPRyegrass",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.AgPasture.PastureSpecies, Models",
              "doyGermination": 275,
              "daysEmergenceToAnthesis": 120,
              "daysAnthesisToMaturity": 85,
              "degreesDayForAnthesis": 1100.0,
              "degreesDayForMaturity": 900.0,
              "daysAnnualsFactor": 45,
              "FVPDFunction": {
                "$type": "Models.Functions.LinearInterpolationFunction, Models",
                "Name": "LinearInterpolationFunction",
                "ResourceName": null,
                "Children": [],
                "Enabled": true,
                "ReadOnly": false
              },
              "LightProfile": null,
              "InitialShootDM": 500.0,
              "InitialRootDM": 150.0,
              "InitialRootDepth": 350.0,
              "initialDMFractionsGrasses": [
                0.15,
                0.25,
                0.25,
                0.05,
                0.05,
                0.1,
                0.1,
                0.05,
                0.0,
                0.0,
                0.0
              ],
              "initialDMFractionsLegumes": [
                0.16,
                0.23,
                0.22,
                0.05,
                0.03,
                0.05,
                0.05,
                0.01,
                0.04,
                0.08,
                0.08
              ],
              "initialDMFractionsForbs": [
                0.2,
                0.2,
                0.15,
                0.05,
                0.1,
                0.15,
                0.1,
                0.05,
                0.0,
                0.0,
                0.0
              ],
              "PhotosyntheticEfficiency": 0.01,
              "PhotosynthesisCurveFactor": 0.8,
              "FractionPAR": 0.5,
              "ReferenceCO2": 380.0,
              "CO2EffectScaleFactor": 700.0,
              "CO2EffectOffsetFactor": 600.0,
              "CO2EffectMinimum": 0.7,
              "CO2EffectExponent": 2.0,
              "ReproSeasonDurationCoeff": 2.0,
              "ReproSeasonShouldersLengthFactor": 1.0,
              "ReproSeasonOnsetDurationFactor": 0.6,
              "RelativeTurnoverEmerging": 2.0,
              "DetachmentDroughtCoefficient": 3.0,
              "DetachmentDroughtEffectMin": 0.1,
              "TurnoverStockFactor": 0.01,
              "TurnoverDefoliationEffectMin": 0.025,
              "MinimumGreenLeafProp": 0.8,
              "MinimumGreenRootProp": 0.5,
              "Name": "AGPWhiteClover",
              "ResourceName": "AGPWhiteClover",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 0,
              "ASCOrder": null,
              "ASCSubOrder": null,
              "SoilType": "MergeAge40",
              "LocalName": null,
              "Site": "-",
              "NearestTown": "-",
              "Region": "Plains",
              "State": "Canterbury",
              "Country": "New Zealand",
              "NaturalVegetation": null,
              "ApsoilNumber": null,
              "Latitude": 0.0,
              "Longitude": 0.0,
              "LocationAccuracy": null,
              "YearOfSampling": null,
              "DataSource": "Generic profile descriptions provided by Trevor Webb and data for functional horizions based on SWAMP project results",
              "Comments": "Bulk density values were measured on the fine earth fraction so values entered into apsim soil are adjusted down to account for stone content (assuming stones are inert from all soil process so their mass and volume is removed from model paramaters).  SAT, DUL, LL15 and Air dry have been adjusted down to account for stone content.  OC has not been adjusted so the model will get the correct carbon and N amounts using the adjusted BD.",
              "Name": "HE_140mm",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Thickness": [
                    200.0,
                    150.0,
                    200.0,
                    350.0,
                    150.0,
                    150.0,
                    300.0
                  ],
                  "ParticleSizeClay": [
                    20.0,
                    24.0,
                    39.0,
                    44.0,
                    44.0,
                    19.0,
                    19.0
                  ],
                  "ParticleSizeSand": [
                    14.5,
                    18.0,
                    13.0,
                    1.0,
                    1.0,
                    15.0,
                    15.0
                  ],
                  "ParticleSizeSilt": [
                    65.5,
                    58.0,
                    48.0,
                    55.0,
                    55.0,
                    66.0,
                    66.0
                  ],
                  "Rocks": null,
                  "Texture": null,
                  "BD": [
                    1.3105,
                    1.524,
                    1.42,
                    1.424,
                    1.424,
                    1.601,
                    1.601
                  ],
                  "AirDry": [
                    0.07675,
                    0.201,
                    0.2985,
                    0.308,
                    0.308,
                    0.162,
                    0.162
                  ],
                  "LL15": [
                    0.1535,
                    0.201,
                    0.2985,
                    0.308,
                    0.308,
                    0.162,
                    0.162
                  ],
                  "DUL": [
                    0.3735,
                    0.332,
                    0.426,
                    0.446,
                    0.446,
                    0.325,
                    0.325
                  ],
                  "SAT": [
                    0.456165,
                    0.39432,
                    0.441525,
                    0.4557,
                    0.456,
                    0.376,
                    0.376
                  ],
                  "KS": null,
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "RocksMetadata": null,
                  "TextureMetadata": null,
                  "ParticleSizeSandMetadata": null,
                  "ParticleSizeSiltMetadata": null,
                  "ParticleSizeClayMetadata": null,
                  "Name": "Physical",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.154,
                        0.201,
                        0.299,
                        0.308,
                        0.308,
                        0.162,
                        0.162
                      ],
                      "KL": [
                        0.1,
                        0.1,
                        0.1,
                        0.05,
                        0.05,
                        0.05,
                        0.05
                      ],
                      "XF": [
                        1.0,
                        0.8,
                        0.8,
                        0.3,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "AGPRyegrassSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.154,
                        0.201,
                        0.299,
                        0.308,
                        0.308,
                        0.162,
                        0.162
                      ],
                      "KL": [
                        0.1,
                        0.1,
                        0.1,
                        0.05,
                        0.05,
                        0.05,
                        0.05
                      ],
                      "XF": [
                        1.0,
                        0.8,
                        0.8,
                        0.3,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "AGPWhiteCloverSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "FOMCNRatio": 40.0,
                  "Thickness": [
                    200.0,
                    150.0,
                    200.0,
                    350.0,
                    150.0,
                    150.0,
                    300.0
                  ],
                  "Carbon": [
                    4.502,
                    1.91,
                    0.772,
                    0.422,
                    0.422,
                    0.402,
                    0.4
                  ],
                  "CarbonUnits": 0,
                  "SoilCNRatio": [
                    11.0,
                    11.0,
                    11.0,
                    11.0,
                    11.0,
                    11.0,
                    11.0
                  ],
                  "FBiom": [
                    0.048,
                    0.027,
                    0.0195,
                    0.015,
                    0.015,
                    0.015,
                    0.015
                  ],
                  "FInert": [
                    0.382,
                    0.634,
                    0.784,
                    0.924,
                    0.924,
                    0.971,
                    0.985
                  ],
                  "FOM": [
                    347.6697415161641,
                    257.5600792948774,
                    172.6476842098852,
                    85.73430271224917,
                    63.51353358667622,
                    47.05198294088997,
                    25.822675739258056
                  ],
                  "CarbonMetadata": null,
                  "FOMMetadata": null,
                  "Name": "Organic",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Thickness": [
                    200.0,
                    150.0,
                    200.0,
                    350.0,
                    150.0,
                    150.0,
                    300.0
                  ],
                  "PH": [
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0
                  ],
                  "PHUnits": 0,
                  "EC": null,
                  "ESP": null,
                  "ECMetadata": null,
                  "CLMetadata": null,
                  "ESPMetadata": null,
                  "PHMetadata": null,
                  "Name": "Chemical",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Water, Models",
                  "Thickness": [
                    200.0,
                    150.0,
                    200.0,
                    350.0,
                    150.0,
                    150.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.3735,
                    0.332,
                    0.426,
                    0.446,
                    0.446,
                    0.325,
                    0.325
                  ],
                  "RelativeTo": null,
                  "FilledFromTop": true,
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "Temperature",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 6.0,
                  "SummerCona": 3.5,
                  "WinterDate": "1-Apr",
                  "WinterU": 6.0,
                  "WinterCona": 2.5,
                  "DiffusConst": 0.0,
                  "DiffusSlope": 0.0,
                  "Salb": 0.0,
                  "CN2Bare": 0.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "DischargeWidth": 5.0,
                  "CatchmentArea": 10.0,
                  "PSIDul": -100.0,
                  "Thickness": null,
                  "SWCON": null,
                  "KLAT": null,
                  "Name": "WaterBalance",
                  "ResourceName": "WaterBalance",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.NutrientPatching.NutrientPatchManager, Models",
                  "MaximumNitrogenAvailableToPlants": 0.0,
                  "NPartitionApproach": 0,
                  "AutoAmalgamationApproach": 0,
                  "basePatchApproach": 0,
                  "AllowPatchAmalgamationByAge": false,
                  "PatchAgeForForcedMerge": 0.0,
                  "LayerForNPartition": -99.0,
                  "Name": "NutrientPatchManager",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Nutrients.Nutrient, Models",
                  "Name": "Nutrient",
                  "ResourceName": "Nutrient",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                  "Thickness": [
                    200.0,
                    150.0,
                    200.0,
                    350.0,
                    150.0,
                    150.0,
                    300.0
                  ],
                  "InitialValues": [
                    18.980269911034664,
                    4.62457625454453,
                    1.0468134997068956,
                    1.0468134997068903,
                    1.031208999804597,
                    1.0,
                    1.0
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                  "Thickness": [
                    200.0,
                    150.0,
                    200.0,
                    350.0,
                    150.0,
                    150.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.883817561664043,
                    0.31295758807944385,
                    0.1046813499706893,
                    0.10468134997068919,
                    0.13645423331379297,
                    0.2,
                    0.2
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                  "Thickness": null,
                  "InitialValues": null,
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "PlantAvailableNO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                  "Thickness": null,
                  "InitialValues": null,
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "PlantAvailableNH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                  "Thickness": [
                    200.0,
                    150.0,
                    200.0,
                    350.0,
                    150.0,
                    150.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "InitialValuesUnits": 1,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "Urea",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Decomposition].MineralisedN",
                "[Nutrient].MineralisedN",
                "[NO3].kgha",
                "[NH4].kgha",
                "[Urea].kgha"
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "GroupByVariableName": null,
              "Name": "Report",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.ForageDigestibility.Forages, Models",
          "Parameters": [
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "SurfaceOrganicMatter.Residue",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "SurfaceOrganicMatter.Residue",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPRyegrass.Leaf",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPRyegrass.Leaf",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPRyegrass.Stem",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPRyegrass.Stem",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPRyegrass.Stolon",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPRyegrass.Stolon",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPWhiteClover.Leaf",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPWhiteClover.Leaf",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPWhiteClover.Stem",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPWhiteClover.Stem",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPWhiteClover.Stolon",
              "IsLive": true,
              "DigestibilityString": "0.7",
              "FractionConsumable": 1.0,
              "MinimumAmount": 100.0,
              "UseDigestibilityFromModel": false
            },
            {
              "$type": "Models.ForageDigestibility.ForageMaterialParameters, Models",
              "Name": "AGPWhiteClover.Stolon",
              "IsLive": false,
              "DigestibilityString": "0.3",
              "FractionConsumable": 1.0,
              "MinimumAmount": 0.0,
              "UseDigestibilityFromModel": false
            }
          ],
          "Name": "Forages",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}