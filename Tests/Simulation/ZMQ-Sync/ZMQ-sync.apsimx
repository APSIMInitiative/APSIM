{
  "$type": "Models.Core.Simulations, Models",
  "Version": 168,
  "Name": "Simulations",
  "ResourceName": null,
  "Children": [
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "ResourceName": null,
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Descriptors": null,
      "Name": "Simulation",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Clock, Models",
          "Start": "1900-01-01T00:00:00",
          "End": "1900-01-31T00:00:00",
          "Name": "Clock",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "Verbosity": 100,
          "Name": "SummaryFile",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Climate.Weather, Models",
          "ConstantsFile": null,
          "FileName": "%root%\\Examples\\WeatherFiles\\Dalby.met",
          "ExcelWorkSheetName": null,
          "Name": "Weather",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "SoilArbitrator",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 1.0,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "Name": "Field",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Wheat].Phenology.Zadok.Stage",
                "[Wheat].Phenology.CurrentStageName",
                "[Wheat].AboveGround.Wt",
                "[Wheat].AboveGround.N",
                "[Wheat].Grain.Total.Wt*10 as Yield",
                "[Wheat].Grain.Protein",
                "[Wheat].Grain.Size",
                "[Wheat].Grain.Number",
                "[Wheat].Grain.Total.Wt",
                "[Wheat].Grain.Total.N",
                "[Wheat].Total.Wt"
              ],
              "EventNames": [
                "[Wheat].Harvesting"
              ],
              "GroupByVariableName": null,
              "Name": "Report",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser",
              "ResourceName": "Fertiliser",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 0,
              "ASCOrder": "Vertosol",
              "ASCSubOrder": "Black",
              "SoilType": "Clay",
              "LocalName": null,
              "Site": "Norwin",
              "NearestTown": "Norwin",
              "Region": "Darling Downs and Granite Belt",
              "State": "Queensland",
              "Country": "Australia",
              "NaturalVegetation": "Qld. Bluegrass, possible Qld. Blue gum",
              "ApsoilNumber": "900",
              "Latitude": -27.581836,
              "Longitude": 151.320206,
              "LocationAccuracy": " +/- 20m",
              "YearOfSampling": null,
              "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba; Characteriesd as part of the GRDC funded project\"Doing it better, doing it smarter, managing soil water in Australian agriculture' 2011",
              "Comments": "OC, CLL for all crops estimated-based on Bongeen Mywybilla Soil No1",
              "Name": "Soil",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "ParticleSizeClay": null,
                  "ParticleSizeSand": null,
                  "ParticleSizeSilt": null,
                  "Rocks": null,
                  "Texture": null,
                  "BD": [
                    1.01056473311131,
                    1.07145631083388,
                    1.09393858528057,
                    1.15861335018721,
                    1.17301160318016,
                    1.16287303586874,
                    1.18749547755906
                  ],
                  "AirDry": [
                    0.130250054518252,
                    0.198689390775399,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "LL15": [
                    0.260500109036505,
                    0.248361738469248,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "DUL": [
                    0.52100021807301,
                    0.496723476938497,
                    0.488437607673005,
                    0.480296969355493,
                    0.471583596524955,
                    0.457070570557793,
                    0.452331759845006
                  ],
                  "SAT": [
                    0.588654817693846,
                    0.565676863836273,
                    0.557192986686577,
                    0.532787415023694,
                    0.527354112007486,
                    0.531179986464627,
                    0.521888499034317
                  ],
                  "KS": [
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0
                  ],
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "RocksMetadata": null,
                  "TextureMetadata": null,
                  "ParticleSizeSandMetadata": null,
                  "ParticleSizeSiltMetadata": null,
                  "ParticleSizeClayMetadata": null,
                  "Name": "Physical",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.261,
                        0.248,
                        0.28,
                        0.306,
                        0.36,
                        0.392,
                        0.446
                      ],
                      "KL": [
                        0.06,
                        0.06,
                        0.06,
                        0.04,
                        0.04,
                        0.02,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "WheatSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 5.0,
                  "SummerCona": 5.0,
                  "WinterDate": "1-Apr",
                  "WinterU": 5.0,
                  "WinterCona": 5.0,
                  "DiffusConst": 40.0,
                  "DiffusSlope": 16.0,
                  "Salb": 0.12,
                  "CN2Bare": 73.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "DischargeWidth": "NaN",
                  "CatchmentArea": "NaN",
                  "PSIDul": -100.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "SWCON": [
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3
                  ],
                  "KLAT": null,
                  "Name": "SoilWater",
                  "ResourceName": "WaterBalance",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "FOMCNRatio": 40.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "Carbon": [
                    1.2,
                    0.96,
                    0.6,
                    0.3,
                    0.18,
                    0.12,
                    0.12
                  ],
                  "CarbonUnits": 0,
                  "SoilCNRatio": [
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0
                  ],
                  "FBiom": [
                    0.04,
                    0.02,
                    0.02,
                    0.02,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "FInert": [
                    0.4,
                    0.6,
                    0.8,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "FOM": [
                    347.1290323127564,
                    270.3443621919937,
                    163.97214434990104,
                    99.45413288704063,
                    60.32198083112468,
                    36.58713082867487,
                    22.1912165985086
                  ],
                  "CarbonMetadata": null,
                  "FOMMetadata": null,
                  "Name": "Organic",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "PH": [
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0
                  ],
                  "PHUnits": 0,
                  "EC": null,
                  "ESP": null,
                  "CEC": null,
                  "ECMetadata": null,
                  "CLMetadata": null,
                  "ESPMetadata": null,
                  "PHMetadata": null,
                  "Name": "Chemical",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Water, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.52100021807301,
                    0.496723476938497,
                    0.488437607673005,
                    0.480296969355493,
                    0.471583596524955,
                    0.457070570557793,
                    0.452331759845006
                  ],
                  "InitialPAWmm": 361.2454283127387,
                  "RelativeTo": "LL15",
                  "FilledFromTop": false,
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "Temperature",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Nutrients.Nutrient, Models",
                  "Name": "Nutrient",
                  "ResourceName": "Nutrient",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "InitialValuesUnits": 1,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "Urea",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "SurfOM": [],
              "Canopies": [],
              "InitialResidueName": "wheat_stubble",
              "InitialResidueType": "wheat",
              "InitialResidueMass": 500.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 100.0,
              "Name": "SurfaceOrganicMatter",
              "ResourceName": "SurfaceOrganicMatter",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "Name": "Wheat",
              "ResourceName": "Wheat",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 1.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "SoilHeatFluxFraction": 0.4,
              "MinimumHeightDiffForNewLayer": 0.0,
              "NightInterceptionFraction": 0.5,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils;",
                "using System.Linq;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] Clock Clock;",
                "        [Link] Fertiliser Fertiliser;",
                "        [Link] Summary Summary;",
                "        ",
                "        ",
                "        [Description(\"Amount of fertiliser to be applied (kg/ha)\")]",
                "        public double Amount { get; set;}",
                "        ",
                "        [Description(\"Crop to be fertilised\")]",
                "        public string CropName { get; set;}",
                "        ",
                "        ",
                "        ",
                "",
                "        [EventSubscribe(\"Sowing\")]",
                "        private void OnSowing(object sender, EventArgs e)",
                "        {",
                "            Model crop = sender as Model;",
                "            if (crop.Name.ToLower()==CropName.ToLower())",
                "                Fertiliser.Apply(Amount: Amount, Type: Fertiliser.Types.NO3N);",
                "        }",
                "        ",
                "    }",
                "}"
              ],
              "Parameters": [
                {
                  "Key": "Amount",
                  "Value": "160"
                },
                {
                  "Key": "CropName",
                  "Value": "wheat"
                }
              ],
              "Name": "SowingFertiliser",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils.Nutrients;",
                "using System.Linq;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "using Models.Soils;",
                "using Models.Soils.Nutrients;",
                "using Models.Utilities;",
                "using APSIM.Shared.Utilities;",
                "",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] Plant Wheat;",
                "",
                "        [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "            if (Wheat.IsReadyForHarvesting)",
                "            {",
                "               Wheat.Harvest();",
                "               Wheat.EndCrop();    ",
                "            }",
                "        ",
                "        }",
                "        ",
                "    }",
                "}"
              ],
              "Parameters": [],
              "Name": "Harvest",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Interfaces;",
                "using System.Linq;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "using Models.Soils;",
                "using Models.Soils.Nutrients;",
                "using Models.Utilities;",
                "using APSIM.Shared.Utilities;",
                "using Models.Climate;",
                "",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] private Clock Clock;",
                "        [Link] private Fertiliser Fertiliser;",
                "        [Link] private Summary Summary;",
                "        [Link(ByName = true)] private Plant Wheat;",
                "        [Link] private Soil Soil;",
                "        private Accumulator accumulatedRain;",
                "        [Link]",
                "        private ISoilWater waterBalance;",
                "        ",
                "        [Description(\"Start of sowing window (d-mmm)\")]",
                "        public string StartDate { get; set;}",
                "        [Description(\"End of sowing window (d-mmm)\")]",
                "        public string EndDate { get; set;}",
                "        [Description(\"Minimum extractable soil water for sowing (mm)\")]",
                "        public double MinESW { get; set;}",
                "        [Description(\"Accumulated rainfall required for sowing (mm)\")]",
                "        public double MinRain { get; set;}",
                "        [Description(\"Duration of rainfall accumulation (d)\")]",
                "        public int RainDays { get; set;}",
                "        [Description(\"Cultivar to be sown\")]",
                "        [Display(Type=DisplayType.CultivarName, PlantName = \"Wheat\")]",
                "        public string CultivarName { get; set;}",
                "        [Description(\"Sowing depth (mm)\")]",
                "        public double SowingDepth { get; set;}        ",
                "        [Description(\"Row spacing (mm)\")]",
                "        public double RowSpacing { get; set;}    ",
                "        [Description(\"Plant population (/m2)\")]",
                "        public double Population { get; set;}    ",
                "        ",
                "        ",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                "        {",
                "            accumulatedRain = new Accumulator(this, \"[Weather].Rain\", RainDays);",
                "        }",
                "        ",
                "",
                "        [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "            accumulatedRain.Update();",
                "            ",
                "            if (DateUtilities.WithinDates(StartDate,Clock.Today,EndDate) &&",
                "                !Wheat.IsAlive &&",
                "                MathUtilities.Sum(waterBalance.ESW) > MinESW &&",
                "                accumulatedRain.Sum > MinRain)",
                "            {",
                "               Wheat.Sow(population:Population, cultivar:CultivarName, depth:SowingDepth, rowSpacing:RowSpacing);    ",
                "            }",
                "        ",
                "        }",
                "        ",
                "    }",
                "}"
              ],
              "Parameters": [
                {
                  "Key": "StartDate",
                  "Value": "1-may"
                },
                {
                  "Key": "EndDate",
                  "Value": "10-jul"
                },
                {
                  "Key": "MinESW",
                  "Value": "100"
                },
                {
                  "Key": "MinRain",
                  "Value": "25"
                },
                {
                  "Key": "RainDays",
                  "Value": "7"
                },
                {
                  "Key": "CultivarName",
                  "Value": "Hartog"
                },
                {
                  "Key": "SowingDepth",
                  "Value": "30"
                },
                {
                  "Key": "RowSpacing",
                  "Value": "250"
                },
                {
                  "Key": "Population",
                  "Value": "120"
                }
              ],
              "Name": "SowingRule1",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils.Nutrients;",
                "using System.Linq;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "using Models.Soils;",
                "using Models.Soils.Nutrients;",
                "using Models.Utilities;",
                "",
                "using APSIM.Shared.Utilities;",
                "",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] Simulation simulation;",
                "     ",
                "        [Description(\"DummyStringVar\")]",
                "        //public string DummyStringVar { get {return(\"garbage\");} set {Console.WriteLine(\"Dummy set to \" + value);}}",
                "        public string DummyStringVar { get ; set ;}",
                "",
                "",
                "        [Description(\"DummyDoubleVar\")]",
                "        //public double DummyDoubleVar { get {return(-1.0);} set {Console.WriteLine(\"Dummy double set to \" + value.ToString());}}",
                "        public double DummyDoubleVar { get ; set ;}",
                "            ",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                "        {",
                "           ",
                "        }",
                "    }",
                "}"
              ],
              "Parameters": [
                {
                  "Key": "DummyStringVar",
                  "Value": "garbage"
                },
                {
                  "Key": "DummyDoubleVar",
                  "Value": "562.5"
                }
              ],
              "Name": "Manager",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils.Nutrients;",
                "using System.Linq;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "using Models.Soils;",
                "using Models.Soils.Nutrients;",
                "using Models.Utilities;",
                "",
                "using APSIM.Shared.Utilities;",
                "",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class NO3Script : Model",
                "    {",
                "        [Link] Simulation simulation;",
                "        [Link] Fertiliser Fertiliser;",
                "        [Link] Nutrient Nutrient;",
                "        [Link (ByName = true)] Solute NO3; // a child of ^^",
                "            ",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                "        {",
                "        }",
                "        public void AddFertiliser(double Amount /* in kg/ha*/)",
                "        {",
                "            Fertiliser.Apply(Amount: Amount, Type: Fertiliser.Types.NO3N);",
                "        }",
                "        public void SetNO3(double Amount /* in kg/ha*/)",
                "        {",
                "           double [] values = new double[Nutrient.NO3.kgha.Length];",
                "           values[0] = Amount * 0.9;",
                "           values[1] = Amount * 0.1;",
                "           // remaining are 0",
                "           ",
                "           Nutrient.NO3.SetKgHa(SoluteSetterType.Other, values);",
                "        }",
                "",
                "    }",
                "}"
              ],
              "Parameters": [],
              "Name": "NO3Management",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils.Nutrients;",
                "using System.Linq;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "using Models.Soils;",
                "using Models.Soils.Nutrients;",
                "using Models.Utilities;",
                "using Models.Functions;",
                "using MessagePack;",
                "using System.IO;",
                "",
                "using NetMQ;",
                "using NetMQ.Sockets;",
                "",
                "using APSIM.Shared.Utilities;",
                "",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] Simulation simulation;",
                "//             vvvvvvvv New bit                ",
                "        [Link] NO3Script NO3Management;",
                "//             ^^^^^^^^",
                "        [Description(\"Identifier\")]",
                "        public string Identifier { get; set;}",
                "",
                "        [NonSerialized]",
                "        private RequestSocket connection;",
                "            ",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                "        {",
                "           Identifier = \"tcp://\" + Identifier;",
                "           Console.WriteLine(\"StartOfSimulation, id = \" + Identifier);",
                "           connection = new RequestSocket(Identifier);",
                "",
                "           connection.SendFrame(\"connect\");",
                "           var msg = connection.ReceiveFrameString(); ",
                "           if (msg != \"ok\") { throw new Exception(\"Expected ok\"); }",
                "        }",
                "        ",
                "        [EventSubscribe(\"EndOfDay\")]",
                "        private void OnEndOfDay(object sender, EventArgs e)",
                "        {",
                "           bool moreToDo = true;",
                "           connection.SendFrame(\"paused\");",
                "           while (moreToDo) {",
                "             var msg = connection.ReceiveMultipartMessage();",
                "             //Console.WriteLine(\"Got {0} parts, first = {1}\", msg.FrameCount, msg[0].ConvertToString()); ",
                "             if (msg.FrameCount <= 0) { continue ; }",
                "              ",
                "             var command = msg[0].ConvertToString();",
                "             if (command == \"resume\") ",
                "                moreToDo = false;",
                "//             vvvvvvvv New bit                ",
                "             else if (command == \"setNO3\" && msg.FrameCount == 2) {",
                "                 double Amount = MessagePackSerializer.Deserialize<double>( msg[1].Buffer );",
                "                 Console.WriteLine(\"Got setNO3 {0} \", Amount); ",
                "                 NO3Management.SetNO3(Amount);",
                "                 connection.SendFrame(\"ok\");",
                "//             ^^^^^^^^",
                "             } else if (command == \"set\" && msg.FrameCount == 3) {",
                "                string variableName = MessagePackSerializer.Deserialize<string>( msg[1].Buffer );",
                "                var myType = simulation.Get(variableName).GetType();",
                "                //Console.WriteLine(\"Got set {0}, my type is {1}\", variableName, myType);",
                "                object value = MessagePackSerializer.Deserialize<object>( msg[2].Buffer );",
                "                //Console.WriteLine(\"Got set {0} of incoming type {1}\", variableName, value.GetType());",
                "                if (value.GetType().IsArray) {",
                "                   // This is ugly - object[] isn't handled by apsim's Get/Set..",
                "                   Type myElementType = myType.GetElementType();",
                "                   Object[] values = (value as object[]);",
                "                   if (isNumeric(myElementType)) {",
                "                       var myValues = Array.ConvertAll(values, (e) => (double) e);",
                "                       simulation.Set(variableName, myValues);",
                "                   } else if (isInteger(myElementType)) {",
                "                       var myValues = Array.ConvertAll(values, (e) => (int) e);",
                "                       simulation.Set(variableName, myValues);",
                "                   } else if (isString(myElementType)) {",
                "                       var myValues = Array.ConvertAll(values, (e) => (string) e);",
                "                       simulation.Set(variableName, myValues);",
                "                   } else {",
                "                      throw new Exception(\"Don't know what to do setting a \" + myElementType + \" variable\");",
                "                   }",
                "                   //var myValues = Array.ConvertAll(values, (e) => Convert.ChangeType(e, myElementType));",
                "                   //var myValues = values.Select(e => Convert.ChangeType(e, myType.GetElementType())).ToArray();",
                "                   //var myValues = Array.CreateInstance(myElementType, values.Length);",
                "                   //for (int i = 0; i < values.Length; i++ ) { myValues.SetValue(Convert.ChangeType(values[i], myElementType), i); }",
                "                   //Console.WriteLine(\"Doing set {0} of type {1}\", variableName, myValues.GetType() );",
                "                   //Object[] myValues = (value as object[]);",
                "                   //simulation.Set(variableName, myValues);",
                "                } else {",
                "                   simulation.Set(variableName, Convert.ChangeType(value, myType));",
                "                }",
                "                connection.SendFrame(\"ok\");",
                "             } else if (command == \"get\" && msg.FrameCount == 2) {",
                "                string variableName = MessagePackSerializer.Deserialize<string>( msg[1].Buffer );",
                "                object value = simulation.Get(variableName);",
                "                if (value is IFunction function)",
                "                    value = function.Value();",
                "                else if (value != null && (value.GetType().IsArray || value.GetType().IsClass))",
                "                {",
                "                   try",
                "                   {",
                "                       value = ReflectionUtilities.Clone(value);",
                "                   }",
                "                   catch (Exception err)",
                "                   {",
                "                       throw new Exception($\"Cannot report variable \\\"{variableName}\\\": Variable is a non-reportable type: \\\"{value?.GetType()?.Name}\\\".\", err);",
                "                   }",
                "                }",
                "                //Console.WriteLine(\"Got get '{0}' of type '{1}'\", variableName, value?.GetType()); ",
                "             ",
                "                byte[] bytes;",
                "                if (value != null) {",
                "                   bytes = MessagePackSerializer.Serialize(value);",
                "                } else {",
                "                   bytes = MessagePackSerializer.Serialize(\"NA\"); // fixme. Probably a better way to do this",
                "                } ",
                "",
                "                connection.SendFrame(bytes);",
                "             } else {",
                "                throw new Exception(\"Expected resume/get/set, not '\" + command + \"'\");",
                "             }",
                "           }",
                "        } ",
                "        [EventSubscribe(\"EndOfSimulation\")]",
                "        private void OnSimulationEnding(object sender, EventArgs e)",
                "        {",
                "            connection.SendFrame(\"finished\");",
                "            var msg = connection.ReceiveFrameString(); ",
                "           ",
                "            if (msg != \"ok\") { throw new Exception(\"Expected ok at end\"); }",
                "            connection.Close();",
                "            Console.WriteLine(\"Simulation Ending\");",
                "        }       ",
                "        static bool isNumeric(Type type) {",
                "         switch (Type.GetTypeCode(type))",
                "            {",
                "                case TypeCode.Double:",
                "                case TypeCode.Single:",
                "                   return true;",
                "            }",
                "            return false;",
                "        }",
                "        static bool isInteger(Type type) {",
                "         switch (Type.GetTypeCode(type))",
                "            {",
                "                case TypeCode.Int16:",
                "                case TypeCode.Int32:",
                "                case TypeCode.Int64:",
                "                case TypeCode.UInt16:",
                "                case TypeCode.UInt32:",
                "                case TypeCode.UInt64:",
                "                   return true;",
                "            }",
                "            return false;",
                "        }",
                "        static bool isString(Type type) {",
                "         switch (Type.GetTypeCode(type))",
                "            {",
                "                case TypeCode.String:",
                "                   return true;",
                "            }",
                "            return false;",
                "        }",
                "    }",
                "}"
              ],
              "Parameters": [
                {
                  "Key": "Identifier",
                  "Value": ""
                }
              ],
              "Name": "Synchroniser",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Yield (kg/ha)",
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Wheat Yield Time Series",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 0,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Clock.Today",
              "YFieldName": "Yield",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Wheat Yield",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}